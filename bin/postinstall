#!/bin/bash

set -e

. ${INSTALLER_DIR}/wizard

CLI="${APP_NAME}"

rake_commands="db:migrate db:seed"

# set rails_cache_store
memcached_servers="$(${CLI} config:get MEMCACHED_SERVERS || echo "")"
if [ -z "$memcached_servers" ]; then
	${CLI} config:set RAILS_CACHE_STORE=file_store
else
	${CLI} config:set RAILS_CACHE_STORE=memcache
fi

# create attachments folder
attachments_path=$(${CLI} config:get ATTACHMENTS_STORAGE_PATH || echo "/var/db/${APP_NAME}/files")
mkdir -p "${attachments_path}"
chown ${APP_USER}.${APP_GROUP} "${attachments_path}"
${CLI} config:set ATTACHMENTS_STORAGE_PATH="${attachments_path}"

# set web host
${CLI} config:set HOST=127.0.0.1

# set web concurrency
web_concurrency=$(${CLI} config:get WEB_CONCURRENCY || echo "2")
${CLI} config:set WEB_CONCURRENCY=${web_concurrency}

# set web timeout
web_timeout=$(${CLI} config:get WEB_TIMEOUT || echo "15")
${CLI} config:set WEB_TIMEOUT=${web_timeout}

# set SECRET_KEY_BASE env variable
secret_token=$(${CLI} config:get SECRET_KEY_BASE || ${CLI} config:get SECRET_TOKEN || ${CLI} run rake -s secret | tail -1)
${CLI} config:set SECRET_KEY_BASE="$secret_token"

# set SECRET_TOKEN env variable for backwards compatibility
${CLI} config:set SECRET_TOKEN="$secret_token"

# migrate
${CLI} run rake ${rake_commands} || true

# set relative root url from configured server prefix
relative_root=$(${CLI} config:get SERVER_PATH_PREFIX || echo "/")
# If there's already a relative root configured, we need to compile assets, as well.
current_relative_root=$(${CLI} config:get RAILS_RELATIVE_URL_ROOT || echo "")
if [ "$relative_root" != "/" ] || [ "$current_relative_root/" != "$relative_root" ]; then
	${CLI} config:set RAILS_RELATIVE_URL_ROOT="$(echo "${relative_root}" | sed "s|/$||")"

	# Need to re-compile assets due to changed paths
	${CLI} run rake assets:precompile

	chmod -R a+r "${APP_HOME}/public/assets/"
fi

# set various settings
sys_api_key=$(${CLI} config:get SYS_API_KEY)
web_protocol="$(${CLI} config:get SERVER_PROTOCOL)"
web_hostname="$(${CLI} config:get SERVER_HOSTNAME)"
web_url="${web_protocol}://${web_hostname}"
${CLI} run rake setting:set[host_name=${web_hostname},protocol=${web_protocol},sys_api_enabled=1,sys_api_key=${sys_api_key}] 1>/dev/null

# Avoid errors on versions < 5.0
if [ -e "${APP_HOME}/lib/tasks/scm.rake" ]; then
	SVN_REPOSITORIES=$(${CLI} config:get SVN_REPOSITORIES || echo "")
	GIT_REPOSITORIES=$(${CLI} config:get GIT_REPOSITORIES || echo "")

	if [ -n "$SVN_REPOSITORIES" ]; then
		# migrate previous repositories with reposman to managed
		${CLI} run rake scm:migrate:managed["file://${SVN_REPOSITORIES}"] || true

		${CLI} run rake scm:set_checkout_url["subversion=${web_url}/svn${relative_root}"] || true
	fi

	if [ -n "$GIT_REPOSITORIES" ]; then
		${CLI} run rake scm:set_checkout_url["git=${web_url}/git${relative_root}"] || true
	fi

	# Output any remnants of existing repositories
	${CLI} run rake scm:find_unassociated || true
fi

# scale
${CLI} scale web=1 worker=1 || true

# restart
service ${APP_NAME} restart
